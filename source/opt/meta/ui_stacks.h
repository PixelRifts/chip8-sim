// This file is autogenerated from the corresponding .mdesk file

#define UI_STACK_MAX 64
#define UI_STACK_DECLS \
struct {\
struct { UI_Box* elems[UI_STACK_MAX]; UI_Box* *top; u64 len; b32 auto_pop; } parent_stack;\
struct { UI_FontInfo* elems[UI_STACK_MAX]; UI_FontInfo* *top; u64 len; b32 auto_pop; } font_stack;\
struct { u32 elems[UI_STACK_MAX]; u32 *top; u64 len; b32 auto_pop; } bg_color_stack;\
struct { u32 elems[UI_STACK_MAX]; u32 *top; u64 len; b32 auto_pop; } hot_color_stack;\
struct { u32 elems[UI_STACK_MAX]; u32 *top; u64 len; b32 auto_pop; } active_color_stack;\
struct { f32 elems[UI_STACK_MAX]; f32 *top; u64 len; b32 auto_pop; } rounding_stack;\
struct { f32 elems[UI_STACK_MAX]; f32 *top; u64 len; b32 auto_pop; } softness_stack;\
struct { f32 elems[UI_STACK_MAX]; f32 *top; u64 len; b32 auto_pop; } edge_size_stack;\
struct { u32 elems[UI_STACK_MAX]; u32 *top; u64 len; b32 auto_pop; } edge_color_stack;\
struct { u32 elems[UI_STACK_MAX]; u32 *top; u64 len; b32 auto_pop; } text_color_stack;\
struct { UI_Size elems[UI_STACK_MAX]; UI_Size *top; u64 len; b32 auto_pop; } pref_width_stack;\
struct { UI_Size elems[UI_STACK_MAX]; UI_Size *top; u64 len; b32 auto_pop; } pref_height_stack;\
struct { axis2 elems[UI_STACK_MAX]; axis2 *top; u64 len; b32 auto_pop; } layout_axis_stack;\
struct { UI_RenderFunction* elems[UI_STACK_MAX]; UI_RenderFunction* *top; u64 len; b32 auto_pop; } render_function_stack;\
struct { rect elems[UI_STACK_MAX]; rect *top; u64 len; b32 auto_pop; } clipping_rect_stack;\
}

#define UI_POP_ALL_STACKS_TO_ONE \
{ ui_cache->parent_stack.top = &ui_cache->parent_stack.elems[1]; ui_cache->parent_stack.len = 1; }\
{ ui_cache->font_stack.top = &ui_cache->font_stack.elems[1]; ui_cache->font_stack.len = 1; }\
{ ui_cache->bg_color_stack.top = &ui_cache->bg_color_stack.elems[1]; ui_cache->bg_color_stack.len = 1; }\
{ ui_cache->hot_color_stack.top = &ui_cache->hot_color_stack.elems[1]; ui_cache->hot_color_stack.len = 1; }\
{ ui_cache->active_color_stack.top = &ui_cache->active_color_stack.elems[1]; ui_cache->active_color_stack.len = 1; }\
{ ui_cache->rounding_stack.top = &ui_cache->rounding_stack.elems[1]; ui_cache->rounding_stack.len = 1; }\
{ ui_cache->softness_stack.top = &ui_cache->softness_stack.elems[1]; ui_cache->softness_stack.len = 1; }\
{ ui_cache->edge_size_stack.top = &ui_cache->edge_size_stack.elems[1]; ui_cache->edge_size_stack.len = 1; }\
{ ui_cache->edge_color_stack.top = &ui_cache->edge_color_stack.elems[1]; ui_cache->edge_color_stack.len = 1; }\
{ ui_cache->text_color_stack.top = &ui_cache->text_color_stack.elems[1]; ui_cache->text_color_stack.len = 1; }\
{ ui_cache->pref_width_stack.top = &ui_cache->pref_width_stack.elems[1]; ui_cache->pref_width_stack.len = 1; }\
{ ui_cache->pref_height_stack.top = &ui_cache->pref_height_stack.elems[1]; ui_cache->pref_height_stack.len = 1; }\
{ ui_cache->layout_axis_stack.top = &ui_cache->layout_axis_stack.elems[1]; ui_cache->layout_axis_stack.len = 1; }\
{ ui_cache->render_function_stack.top = &ui_cache->render_function_stack.elems[1]; ui_cache->render_function_stack.len = 1; }\
{ ui_cache->clipping_rect_stack.top = &ui_cache->clipping_rect_stack.elems[1]; ui_cache->clipping_rect_stack.len = 1; }\


#define UI_AUTOPOP_IF_REQ \
if (ui_cache->parent_stack.auto_pop) { UI_ParentPop(ui_cache); ui_cache->parent_stack.auto_pop = false; }\
if (ui_cache->font_stack.auto_pop) { UI_FontPop(ui_cache); ui_cache->font_stack.auto_pop = false; }\
if (ui_cache->bg_color_stack.auto_pop) { UI_BoxColorPop(ui_cache); ui_cache->bg_color_stack.auto_pop = false; }\
if (ui_cache->hot_color_stack.auto_pop) { UI_HotColorPop(ui_cache); ui_cache->hot_color_stack.auto_pop = false; }\
if (ui_cache->active_color_stack.auto_pop) { UI_ActiveColorPop(ui_cache); ui_cache->active_color_stack.auto_pop = false; }\
if (ui_cache->rounding_stack.auto_pop) { UI_RoundingPop(ui_cache); ui_cache->rounding_stack.auto_pop = false; }\
if (ui_cache->softness_stack.auto_pop) { UI_EdgeSoftnessPop(ui_cache); ui_cache->softness_stack.auto_pop = false; }\
if (ui_cache->edge_size_stack.auto_pop) { UI_EdgeSizePop(ui_cache); ui_cache->edge_size_stack.auto_pop = false; }\
if (ui_cache->edge_color_stack.auto_pop) { UI_EdgeColorPop(ui_cache); ui_cache->edge_color_stack.auto_pop = false; }\
if (ui_cache->text_color_stack.auto_pop) { UI_TextColorPop(ui_cache); ui_cache->text_color_stack.auto_pop = false; }\
if (ui_cache->pref_width_stack.auto_pop) { UI_PrefWidthPop(ui_cache); ui_cache->pref_width_stack.auto_pop = false; }\
if (ui_cache->pref_height_stack.auto_pop) { UI_PrefHeightPop(ui_cache); ui_cache->pref_height_stack.auto_pop = false; }\
if (ui_cache->layout_axis_stack.auto_pop) { UI_LayoutAxisPop(ui_cache); ui_cache->layout_axis_stack.auto_pop = false; }\
if (ui_cache->render_function_stack.auto_pop) { UI_CustomRenderFunctionPop(ui_cache); ui_cache->render_function_stack.auto_pop = false; }\
if (ui_cache->clipping_rect_stack.auto_pop) { UI_ClippingRectPop(ui_cache); ui_cache->clipping_rect_stack.auto_pop = false; }\

#define UI_INIT_STACKS \
{ ui_cache->parent_stack.top = ui_cache->parent_stack.elems;\
 ui_cache->parent_stack.len = 0; }\
{ ui_cache->font_stack.top = ui_cache->font_stack.elems;\
 ui_cache->font_stack.len = 0; }\
{ ui_cache->bg_color_stack.top = ui_cache->bg_color_stack.elems;\
 ui_cache->bg_color_stack.len = 0; }\
{ ui_cache->hot_color_stack.top = ui_cache->hot_color_stack.elems;\
 ui_cache->hot_color_stack.len = 0; }\
{ ui_cache->active_color_stack.top = ui_cache->active_color_stack.elems;\
 ui_cache->active_color_stack.len = 0; }\
{ ui_cache->rounding_stack.top = ui_cache->rounding_stack.elems;\
 ui_cache->rounding_stack.len = 0; }\
{ ui_cache->softness_stack.top = ui_cache->softness_stack.elems;\
 ui_cache->softness_stack.len = 0; }\
{ ui_cache->edge_size_stack.top = ui_cache->edge_size_stack.elems;\
 ui_cache->edge_size_stack.len = 0; }\
{ ui_cache->edge_color_stack.top = ui_cache->edge_color_stack.elems;\
 ui_cache->edge_color_stack.len = 0; }\
{ ui_cache->text_color_stack.top = ui_cache->text_color_stack.elems;\
 ui_cache->text_color_stack.len = 0; }\
{ ui_cache->pref_width_stack.top = ui_cache->pref_width_stack.elems;\
 ui_cache->pref_width_stack.len = 0; }\
{ ui_cache->pref_height_stack.top = ui_cache->pref_height_stack.elems;\
 ui_cache->pref_height_stack.len = 0; }\
{ ui_cache->layout_axis_stack.top = ui_cache->layout_axis_stack.elems;\
 ui_cache->layout_axis_stack.len = 0; }\
{ ui_cache->render_function_stack.top = ui_cache->render_function_stack.elems;\
 ui_cache->render_function_stack.len = 0; }\
{ ui_cache->clipping_rect_stack.top = ui_cache->clipping_rect_stack.elems;\
 ui_cache->clipping_rect_stack.len = 0; }\

UI_Box* UI_ParentPeek(UI_Cache* cache);
UI_FontInfo* UI_FontPeek(UI_Cache* cache);
u32 UI_BoxColorPeek(UI_Cache* cache);
u32 UI_HotColorPeek(UI_Cache* cache);
u32 UI_ActiveColorPeek(UI_Cache* cache);
f32 UI_RoundingPeek(UI_Cache* cache);
f32 UI_EdgeSoftnessPeek(UI_Cache* cache);
f32 UI_EdgeSizePeek(UI_Cache* cache);
u32 UI_EdgeColorPeek(UI_Cache* cache);
u32 UI_TextColorPeek(UI_Cache* cache);
UI_Size UI_PrefWidthPeek(UI_Cache* cache);
UI_Size UI_PrefHeightPeek(UI_Cache* cache);
axis2 UI_LayoutAxisPeek(UI_Cache* cache);
UI_RenderFunction* UI_CustomRenderFunctionPeek(UI_Cache* cache);
rect UI_ClippingRectPeek(UI_Cache* cache);

UI_Box* UI_ParentPush(UI_Cache* cache, UI_Box* parent);
UI_FontInfo* UI_FontPush(UI_Cache* cache, UI_FontInfo* font);
u32 UI_BoxColorPush(UI_Cache* cache, u32 bg_color);
u32 UI_HotColorPush(UI_Cache* cache, u32 hot_color);
u32 UI_ActiveColorPush(UI_Cache* cache, u32 active_color);
f32 UI_RoundingPush(UI_Cache* cache, f32 rounding);
f32 UI_EdgeSoftnessPush(UI_Cache* cache, f32 softness);
f32 UI_EdgeSizePush(UI_Cache* cache, f32 edge_size);
u32 UI_EdgeColorPush(UI_Cache* cache, u32 edge_color);
u32 UI_TextColorPush(UI_Cache* cache, u32 text_color);
UI_Size UI_PrefWidthPush(UI_Cache* cache, UI_Size pref_width);
UI_Size UI_PrefHeightPush(UI_Cache* cache, UI_Size pref_height);
axis2 UI_LayoutAxisPush(UI_Cache* cache, axis2 layout_axis);
UI_RenderFunction* UI_CustomRenderFunctionPush(UI_Cache* cache, UI_RenderFunction* render_function);
rect UI_ClippingRectPush(UI_Cache* cache, rect clipping_rect);

UI_Box* UI_ParentSetNext(UI_Cache* cache, UI_Box* parent);
UI_FontInfo* UI_FontSetNext(UI_Cache* cache, UI_FontInfo* font);
u32 UI_BoxColorSetNext(UI_Cache* cache, u32 bg_color);
u32 UI_HotColorSetNext(UI_Cache* cache, u32 hot_color);
u32 UI_ActiveColorSetNext(UI_Cache* cache, u32 active_color);
f32 UI_RoundingSetNext(UI_Cache* cache, f32 rounding);
f32 UI_EdgeSoftnessSetNext(UI_Cache* cache, f32 softness);
f32 UI_EdgeSizeSetNext(UI_Cache* cache, f32 edge_size);
u32 UI_EdgeColorSetNext(UI_Cache* cache, u32 edge_color);
u32 UI_TextColorSetNext(UI_Cache* cache, u32 text_color);
UI_Size UI_PrefWidthSetNext(UI_Cache* cache, UI_Size pref_width);
UI_Size UI_PrefHeightSetNext(UI_Cache* cache, UI_Size pref_height);
axis2 UI_LayoutAxisSetNext(UI_Cache* cache, axis2 layout_axis);
UI_RenderFunction* UI_CustomRenderFunctionSetNext(UI_Cache* cache, UI_RenderFunction* render_function);
rect UI_ClippingRectSetNext(UI_Cache* cache, rect clipping_rect);

UI_Box* UI_ParentPop(UI_Cache* cache);
UI_FontInfo* UI_FontPop(UI_Cache* cache);
u32 UI_BoxColorPop(UI_Cache* cache);
u32 UI_HotColorPop(UI_Cache* cache);
u32 UI_ActiveColorPop(UI_Cache* cache);
f32 UI_RoundingPop(UI_Cache* cache);
f32 UI_EdgeSoftnessPop(UI_Cache* cache);
f32 UI_EdgeSizePop(UI_Cache* cache);
u32 UI_EdgeColorPop(UI_Cache* cache);
u32 UI_TextColorPop(UI_Cache* cache);
UI_Size UI_PrefWidthPop(UI_Cache* cache);
UI_Size UI_PrefHeightPop(UI_Cache* cache);
axis2 UI_LayoutAxisPop(UI_Cache* cache);
UI_RenderFunction* UI_CustomRenderFunctionPop(UI_Cache* cache);
rect UI_ClippingRectPop(UI_Cache* cache);

#define UI_DeferLoop(begin, end) for(int _i_ = ((begin), 0); !_i_; _i_ += 1, (end))
#define UI_Parent(ui_cache, parent) UI_DeferLoop(UI_ParentPush(ui_cache, parent), UI_ParentPop(ui_cache))
#define UI_Font(ui_cache, font) UI_DeferLoop(UI_FontPush(ui_cache, font), UI_FontPop(ui_cache))
#define UI_BoxColor(ui_cache, bg_color) UI_DeferLoop(UI_BoxColorPush(ui_cache, bg_color), UI_BoxColorPop(ui_cache))
#define UI_HotColor(ui_cache, hot_color) UI_DeferLoop(UI_HotColorPush(ui_cache, hot_color), UI_HotColorPop(ui_cache))
#define UI_ActiveColor(ui_cache, active_color) UI_DeferLoop(UI_ActiveColorPush(ui_cache, active_color), UI_ActiveColorPop(ui_cache))
#define UI_Rounding(ui_cache, rounding) UI_DeferLoop(UI_RoundingPush(ui_cache, rounding), UI_RoundingPop(ui_cache))
#define UI_EdgeSoftness(ui_cache, softness) UI_DeferLoop(UI_EdgeSoftnessPush(ui_cache, softness), UI_EdgeSoftnessPop(ui_cache))
#define UI_EdgeSize(ui_cache, edge_size) UI_DeferLoop(UI_EdgeSizePush(ui_cache, edge_size), UI_EdgeSizePop(ui_cache))
#define UI_EdgeColor(ui_cache, edge_color) UI_DeferLoop(UI_EdgeColorPush(ui_cache, edge_color), UI_EdgeColorPop(ui_cache))
#define UI_TextColor(ui_cache, text_color) UI_DeferLoop(UI_TextColorPush(ui_cache, text_color), UI_TextColorPop(ui_cache))
#define UI_PrefWidth(ui_cache, pref_width) UI_DeferLoop(UI_PrefWidthPush(ui_cache, pref_width), UI_PrefWidthPop(ui_cache))
#define UI_PrefHeight(ui_cache, pref_height) UI_DeferLoop(UI_PrefHeightPush(ui_cache, pref_height), UI_PrefHeightPop(ui_cache))
#define UI_LayoutAxis(ui_cache, layout_axis) UI_DeferLoop(UI_LayoutAxisPush(ui_cache, layout_axis), UI_LayoutAxisPop(ui_cache))
#define UI_CustomRenderFunction(ui_cache, render_function) UI_DeferLoop(UI_CustomRenderFunctionPush(ui_cache, render_function), UI_CustomRenderFunctionPop(ui_cache))
#define UI_ClippingRect(ui_cache, clipping_rect) UI_DeferLoop(UI_ClippingRectPush(ui_cache, clipping_rect), UI_ClippingRectPop(ui_cache))

